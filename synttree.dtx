%% \CheckSum{864}
% \iffalse meta-comment
%
%  Copyright (c) 1998, 1999, 2001 Matijs van Zuijlen
% 
% \fi
%
%% \CharacterTable
%%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%%   Digits        \0\1\2\3\4\5\6\7\8\9
%%   Exclamation   \!     Double quote  \"     Hash (number) \#
%%   Dollar        \$     Percent       \%     Ampersand     \&
%%   Acute accent  \'     Left paren    \(     Right paren   \)
%%   Asterisk      \*     Plus          \+     Comma         \,
%%   Minus         \-     Point         \.     Solidus       \/
%%   Colon         \:     Semicolon     \;     Less than     \<
%%   Equals        \=     Greater than  \>     Question mark \?
%%   Commercial at \@     Left bracket  \[     Backslash     \\
%%   Right bracket \]     Circumflex    \^     Underscore    \_
%%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%%   Right brace   \}     Tilde         \~}
%%
%\iffalse    This is a METACOMMENT
%
%% Package `synttree' to use with LaTeX 2e
%% Copyright (C) 1998 by Matijs van Zuijlen
%
% Version:  Date:	Changes:
% 0.9	    1998/07/19	First version as a .dtx distibution.
% 0.9a      ?		?
% 1.0	    ?		?
% 1.0a	    1999/10/02  Bugfix: bt combination changed to x.
% 1.1	    1999/10/13  More children, better code.
% 1.2	    2001	Totally new system
%
%<*driver>
\documentclass[a4paper]{ltxdoc}
\usepackage[specials]{synttree}
\EnableCrossrefs         
 %\DisableCrossrefs     % Say \DisableCrossrefs if index is ready
\CodelineIndex
\RecordChanges          % Gather update information
 %\OnlyDescription      % comment out for implementation details
 \OldMakeindex         % use if your MakeIndex is pre-v2.9
\setlength\hfuzz{15pt}  % dont make so many
\hbadness=7000          % over and under full box warnings
\begin{document}
   \DocInput{synttree.dtx}
\end{document}
%</driver>
%
%\fi
%\MakeShortVerb{\"} 
% \title{The "synttree" package for typesetting syntactic
% trees.\footnote{Package version 1.1, documentation version 0.9}}
% \author{Matijs van Zuijlen}
%
% \maketitle
%
% \begin{abstract}
%   The "synttree" package provides a simple way to typeset syntactic
%   trees as used in Chomsky's Generative Grammar.
% \end{abstract}
%
% {\parskip 0pt                ^^A We have to reset \parskip
%                              ^^A (bug in \LaTeX)
% \tableofcontents
% }
%  \section{Introduction}
%
%  The "synttree" package provides a macro for creating syntactic tree
%  structures such as those used in Noam Chomsky's Generative Grammar.
%  It is designed to create a tree that looks nice, with as little use
%  of `special effects', such as PostScript, as possible.
%
%  The current implementation can use either em\TeX{} "\special"'s or
%  \LaTeXe{}'s "\qbezier" macro to draw the lines in the tree,
%  although the latter option is probably not very nice. The behavior
%  defaults to the \LaTeXe{} version.
%
%  Since the application is very specific, there is no need for a very
%  complex drawing algorithm. A more complex package is the TreeTeX
%  system \cite{TreeTeX}. This system, however, produces nodes
%  consisting of a node symbol \emph{and} a label, whereas in
%  syntactic trees the label \emph{is} the node symbol. Additionally,
%  the method of specifying the tree structure itself makes the source
%  code hard to read.
%  \iffalse This text is to be ignored.
%
%  The two packages that I have considered using failed on one of
%  these two demands.  First, the "qtree" package did not keep the
%  distance between levels constant. Second, the "???" package used
%  PostScript for output.
%
%  \fi
%
%  Please send any comments or wishes to me, "mzuijlen@integral.nl".
%
%  \section{Usage}
%
%  \subsection{Package Options}
%
%  The following options are supported:
%
%  \begin{description}
%
%  \item[specials] Use em\TeX{} special commands.
%  \item[nospecials] Don't use em\TeX{} special commands. This is the
%  default.
%
%  \end{description}
%
%  \subsection{Defined Macros}
%
%  The main macro defined by this package is the "\synttree" macro. It
%  takes as arguments first an optional parameter indicating the
%  maximum level of the tree, and second a parameter describing the
%  structure of the tree. Levels are surrounded by "[" and "]".
%
%  Within a level, first, parameters may be added. These are specified
%  by appending a "." to the opening bracket, and appending letters
%  that modify the appearance of the next level. Append a "t" to
%  create a triangle instead of a line going from the label to the
%  level above it, and a "b" to specify that the node has to appear at
%  the bottom of the tree, on a line with the outermost branches. To
%  use "b", a maximum tree depth has to be specified. To combine the
%  two features, use "x".
%
%  Then, the label follows. If spaces are included in the label, surround
%  them (or the entire label) by braces, or use "~". After the label, the
%  node's children follow. They are of course surrounded by brackets. No
%  words may appear between the children.
%
%  The distance between levels can be adjusted by using
%  "\branchheight". It takes a length as its argument, and sets the
%  distance to that length. Default is half an inch.
%
%  The balancing of the triangles can be adjusted by using
%  "\trianglebalance". It takes a number from 0 to 100, indicating the
%  percentage of the triangle on the right side of its attachment point to
%  the parent.
%
%  \subsection{Examples}
%
%  As a simple example, the line
%\begin{verbatim}
%  \synttree[A[B][C]]
%\end{verbatim}
%  creates the following tree:
% \begin{trivlist}
%  \item \synttree[A[B][C]]
% \end{trivlist}
%
% Using the optional parameters, we may specify
%\begin{verbatim}
%  \synttree{4}[A[B[.x {Some text}]][D[E][F[.t G]][H]]]
%\end{verbatim}%
%  to create:
% \begin{trivlist}
%  \item \synttree{4}[A[B[.x {Some text}]][D[E][F[.t G]][H]]]
% \end{trivlist}
%
%  \subsection{Wish List}
%
% I hope to add the following features sooner or later:
% \begin{itemize}
%   \item Larger number of children. The current limit is three.
%   \item Control over other parameters affecting the `look' of the tree.
%   \item The possibility of `sinking' the tree on the current line,
%   so that the top label aligns with the other text, instead of the
%   bottom label.
%   \item The possibility of creating trees within trees.
% \end{itemize}
%
% \StopEventually{
%  \begin{thebibliography}{1}
%  \bibitem{TreeTeX} A. Br{\"u}ggemann-Klein and D. Wood.
%  \newblock {\it Drawing trees nicely with \TeX{}}
%  \newblock {File \texttt{tree\_doc.tex}}
%  \end{thebibliography}
% }
%
% \section{Implementation}
%
% \subsection{Two utility macros}
%
% (Taken from..., !!!!!!!) Very useful for putting stuff after a "\fi" (as
% the name implies).
%    \begin{macrocode}
\def\@AfterFi#1\fi{\fi#1}
\def\@AfterElseFi#1\else#2\fi{\fi#1}
%    \end{macrocode}
%
% \subsection{Drawing commands}
%
% These command are used to draw the lines between the nodes. There are two
% versions: one that uses the \LaTeXe{} "\qbezier" command, and one that is
% an adaptation of the unsupported "eepic" package, and uses specials.
% Currently, the package just uses the \LaTeXe{} version.
%
% First, the line drawing macros themselves. These simply draw a line
% between the two points given. Arguments are counters.
%    \begin{macrocode}
\def\MTr@latexdrawline(#1,#2)(#3,#4){%
  {%
    \count0=#1 \advance\count0 by #3 \divide\count0 2
    \count1=#2 \advance\count1 by #4 \divide\count1 2
    \qbezier(#1,#2)(\count0,\count1)(#3,#4)%
  }%
}
\def\MTr@etexdrawline(#1,#2)(#3,#4){%
  {%
    \count0=\@wholewidth \divide\count0 by 4736
    \special{pn \the\count0}%
    \count0= #1\advance \count0 2368 \divide \count0 4736
    \count1=-#2\advance \count1 -2368 \divide \count1 4736
    \special{pa \the\count0 \space \the\count1}%
    \count0= #3\advance \count0 2368 \divide \count0 4736
    \count1=-#4\advance \count1 -2368 \divide \count1 4736
    \special{pa \the\count0 \space \the\count1}%
    \special{fp}%
  }%
}
%    \end{macrocode}
%
% Options to select either version:
%    \begin{macrocode}
\DeclareOption{specials}{
  \let\MTr@drawline\MTr@etexdrawline%
}
\DeclareOption{nospecials}{
  \let\MTr@drawline\MTr@latexdrawline%
}
\ExecuteOptions{nospecials}%
\ProcessOptions%
%    \end{macrocode}
%
%   \subsection{Definitions}
%
% Some counters etc.\ are defined: The current level, the number of
% children the current node has, the maximum level specified.
%
% To be added: the current
%  "branchmult", whether the current node should be typeset with a
%  triangle.
%
%    \begin{macrocode}
\newcount\MTr@level
\newcount\MTr@numchildren
\newcount\MTr@maxlevel
%    \end{macrocode}
%
% A boolean to specify whether read tokens that are not "[" or "]" should
% be used as a label for a node, or just ignored.
%    \begin{macrocode}
\newif\ifMTr@uselabel
%    \end{macrocode}
%
%    \begin{macrocode}
\newcount\MTr@mybranchmult
\newif\ifMTr@mytriangle
%    \end{macrocode}
%
% Two "savebox"es, one for the label, one to put the child in while it is
% being defined, and a token register, to put the label in before it is
% ready.
%    \begin{macrocode}
\newbox\MTr@labelbox
\newbox\MTr@treebox
%    \end{macrocode}
%
% \subsection{Storage for information on (sub)trees}
%
% For a given tree, information 
%
% Store info for children: Central point is the label's atachment
% point to the line to its parent. Drawing a box around the whole child
% tree, we find the distance from the right side to the central point, $x$,
% the distance from the left side, $w$, the distance from the parent node,
% $y$. Finally, we have the height (equal to the height of the label), and
% the depth (the height of the box minus the height of the label). Usually,
% a child node is typeset one level below its parent. However, we may set
% it lower, e.g., to set the child on the bottom level. "branchmult"
% indicates how many levels below the parent the child should be typeset.
%    \begin{macrocode}
\def\MTr@makechildcounter#1{
    \expandafter\newcount\csname MTr@child#1\endcsname%
}
\def\MTr@makechildstoreage#1{
    \expandafter\newsavebox\csname MTr@child#1box\endcsname%
    \MTr@makechildcounter{#1x}
    \MTr@makechildcounter{#1y}
    \MTr@makechildcounter{#1w}
    \MTr@makechildcounter{#1height}
    \MTr@makechildcounter{#1depth}
    \MTr@makechildcounter{#1branchmult}
    \expandafter\newif\csname ifMTr@child#1triangle\endcsname%
}
\MTr@makechildstoreage{i}
\MTr@makechildstoreage{ii}
\MTr@makechildstoreage{iii}
%    \end{macrocode}
%
% Store info for current subtree: $x$, $w$ ($y$ is not important), height,
% depth, "branchmult", triangle status.
%    \begin{macrocode}
\newcount\MTr@treex
\newcount\MTr@treew
\newcount\MTr@treeheight
\newcount\MTr@treedepth
\newcount\MTr@branchmult
\newif\ifMTr@triangle
%    \end{macrocode}
% Next, the depth, height and half the width of the label.
%    \begin{macrocode}
\newcount\MTr@labeldepth
\newcount\MTr@labelheight
\newcount\MTr@labelhalfwidth
%    \end{macrocode}
% When drawing, we need "morex", to store extra shift to the right when
% drawing the children, and "parenty", the vertical position of the point
% where the line from the parent to the child starts. Also, we need the
% width and height of the picture being drawn, and of each of the child
% pictures.
%    \begin{macrocode}
\newcount\MTr@morex
\newcount\MTr@parenty
\newcount\MTr@picwidth
\newcount\MTr@picheight
\newcount\MTr@piciheight
\newcount\MTr@piciiheight
\newcount\MTr@piciiiheight
%    \end{macrocode}
% Finally, we need a temporary length, and two temporary counters.
%    \begin{macrocode}
\newlength{\MTr@templength}
\newcount\MTr@tempcnta
\newcount\MTr@tempcntb
%    \end{macrocode}
%
% \subsection{Adjustable and other parameters}
% The user can set up several parameters. First,%
% \begin{macro}{\branchheight} "\branchheight" will set the distance
% between levels. Default value is half an inch.
%    \begin{macrocode}
\newcount\MTr@branchheight%
\newcommand{\branchheight}[1]{%
  \setlength{\MTr@templength}{#1}%
  \MTr@branchheight\MTr@templength%
}
\branchheight{.5in}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\trianglebalance}Next, "\trianglebalance" will set the
% balancing of the triangle (EXPLAIN!). Default value is $50$.
%    \begin{macrocode}
\newcount\MTr@trianglemultright%
\newcount\MTr@trianglemultleft%
\newcommand{\trianglebalance}[1]{%
  \MTr@trianglemultleft100%
  \MTr@trianglemultright#1%
  \advance\MTr@trianglemultleft-#1%
}
\trianglebalance{50}%
%    \end{macrocode}
% \end{macro}
% Distance between the labels and the lines.
%    \begin{macrocode}
\newcount\MTr@lineoffset
\setlength{\MTr@templength}{2pt}%
\MTr@lineoffset\MTr@templength%
%    \end{macrocode}
% Minimum label height.
%    \begin{macrocode}
\newlength{\MTr@minheight}
\setlength{\MTr@minheight}{8pt}%
%    \end{macrocode}
% \begin{macro}{\childsidesep} Minimum seperation between edges of two
% children.
%    \begin{macrocode}
\newcount\MTr@childsidesep
\newcommand{\childsidesep}[1]{
    \setlength{\MTr@templength}{#1}%
    \MTr@childsidesep\MTr@templength%
}
\childsidesep{1em}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\childattachsep}How far apart are the attachment points of
% two children?
%    \begin{macrocode}
\newcount\MTr@childattachsep
\newcommand{\childattachsep}[1]{
    \setlength{\MTr@templength}{#1}%
    \MTr@childattachsep\MTr@templength%
}
\childattachsep{0.5in}
\MTr@branchmult 1
%    \end{macrocode}
% \end{macro}
% 
% \subsection{Main macro}
% \begin{macro}{\synttree}
% "\synttree" is the main macro. 
% If the user has not provided a maximum depth, set it to 0. There
% will be no messages concerning depth, except when the bottomlevel
% modifier is used.
% Control is passed on to "\MTr@synttree"
%    \begin{macrocode}
\def\synttree{%
    \@ifnextchar[{\MTr@synttree{0}}{\MTr@synttree}%]
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\MTr@synttree}
% This macro sets maximum depth, end sets picture coordinates to scaled
% points. Next, the real parsing macro, "\MTr@parse", is called.
%    \begin{macrocode}
\def\MTr@synttree#1{%
  \MTr@maxlevel#1%
  \unitlength 1sp%
  \MTr@parse%
}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Parsing}
% 
% Parsing will only work if at least one "]" ...
% \begin{macro}{\MTr@parse}
% "\MTr@parse"
%    \begin{macrocode}
\def\MTr@parse{%
    \MTr@level=0%
    \MTr@numchildren=0%
    \MTr@uselabelfalse%
    \MTr@parserightbracket%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\MTr@parserightbracket}
% Scan until "]". Argument "#1" will contain no "]", but may contain "[",
% which are detected by "\MTr@parseleftbracket".
%    \begin{macrocode}
\def\MTr@parserightbracket#1]{%
  \MTr@parseleftbracket#1[:\END%
  \advance\MTr@level by -1%
  \MTr@dorightbracket%
  \ifnum\MTr@level=0%
    End\newline%
    \unhbox\MTr@childibox%
  \else
    \@AfterFi{\MTr@parserightbracket}%
  \fi%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\Mtr@parseleftbracket}
% Scan after we already had one or more children: Just ignore anything
% that is not a "[" or "]".
% Vind eerste en verdere "[".
% "#1" en "#2" bevatten allebei geen "]".
% dus "#1" is mogelijk een label.
% als "#2=:", dan is [ door "\MTr@parserightbracket" geplaatst.
%    \begin{macrocode}
\def\MTr@parseleftbracket#1[#2\END{%
  \ifMTr@uselabel%
    Label: #1\newline%
    \setbox\MTr@labelbox\hbox{#1}%
  \else
    Ignored: #1\newline%
  \fi%
  \ifx#2:%
  \else
    \MTr@doleftbracket%
    \advance\MTr@level by 1%
    \@AfterFi{\MTr@parseleftbracket#2\END}%
  \fi%
}

%    \end{macrocode}
% \end{macro}
%
% \subsection{Action}
%
% The next macros implement the actions to be undertaken when encountering
% one of the square brackets.
%
% \begin{macro}{\MTr@doleftbracket}
% Upon encountering a "[", we go one level deeper: Begin a group, and reset
% parameters.
%    \begin{macrocode}
\def\MTr@doleftbracket{%
  \bgroup%
  \MTr@numchildren=0%
  \MTr@uselabeltrue%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\MTr@dorightbracket}
% Upon encountering a "]",
%    \begin{macrocode}
\def\MTr@dorightbracket{%
  \MTr@maketreebox%
  \egroup%
  \advance\MTr@numchildren by 1%
  \MTr@uselabelfalse%
  \MTr@savecurrentchildbox%
}
\def\MTr@maketreebox{%
    \MTr@labelheight\ht\MTr@labelbox%
    \typeout{>> label height: \the\MTr@labelheight.}%
    \ifnum\MTr@labelheight<\MTr@minheight\MTr@labelheight\MTr@minheight\fi%%
    \MTr@labeldepth\dp\MTr@labelbox%
    \MTr@labelhalfwidth\wd\MTr@labelbox%
    \divide\MTr@labelhalfwidth 2%
    \ifnum\MTr@numchildren=0%
        \global\setbox\MTr@treebox\hbox{\MTr@outputlabel}
    \fi
    \ifnum\MTr@numchildren=1%
        \global\setbox\MTr@treebox\hbox{\MTr@outputonechild}
    \fi
    \ifnum\MTr@numchildren=2%
        \global\setbox\MTr@treebox\hbox{\MTr@outputtwochildren}
    \fi
    \ifnum\MTr@numchildren=3%
        \global\setbox\MTr@treebox\hbox{\MTr@outputtwochildren}
    \fi
    %\global\MTr@branchmult\MTr@mybranchmult%
    \ifMTr@mytriangle%
        \global\MTr@triangletrue%
    \else%
        \global\MTr@trianglefalse%
    \fi%
}
\def\MTr@savecurrentchildbox{%
    \ifnum\MTr@numchildren=0%
        No child??\newline%
    \else
        \ifnum\MTr@numchildren>3%
            Too many children!!\newline%
        \else
            \MTr@savechildbox{\romannumeral\MTr@numchildren}%
        \fi
    \fi
}
\def\MTr@savechildbox#1{%
    \setbox%
        \csname MTr@child#1box\endcsname%
        \hbox{\unhbox\MTr@treebox}%
    \csname MTr@child#1x\endcsname\MTr@treex%
    \csname MTr@child#1w\endcsname\MTr@treew%
    \csname MTr@child#1height\endcsname\MTr@treeheight%
    \csname MTr@child#1depth\endcsname\MTr@treedepth%
    \csname MTr@child#1branchmult\endcsname\MTr@branchmult%
    \ifMTr@triangle%
        \csname MTr@child#1triangletrue\endcsname%
    \else%
        \csname MTr@child#1trianglefalse\endcsname%
    \fi
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\MTr@startlevel}
% We're in a whole new world now: We begin (again) by setting the
% number of children to 0, and then reading any parameters for this
% level.
%    \begin{macrocode}
\def\MTr@startlevel{%
  \MTr@numchildren 0%
  \global\advance\MTr@level 1%
  \@ifnextchar.{%
    \MTr@setparameters%
  }{%
    \MTr@setparameters.n %
  }}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\MTr@setparameters}
% Set the parameters for this level, then start scanning the label.
%    \begin{macrocode}
\def\MTr@setparameters.#1 {%
  \MTr@bottomnodefalse%
  \MTr@mytrianglefalse%
  \ifx#1b\MTr@bottomnodetrue\else%
  \ifx#1x\MTr@bottomnodetrue\MTr@mytriangletrue\else%
  \ifx#1t\MTr@mytriangletrue\else%
  \ifx#1n\relax\else%
  \typeout{synttree Warning: unknown option #1 in tree}%
  \fi\fi\fi\fi%
  \begin{lrbox}{\MTr@labelbox}%
  \MTr@savetoks={}%
  \MTr@scanin}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Bottom Nodes}
% 
% For bottom nodes, we have to adapt the vertical position so that
% they become, indeed, bottom nodes. This is done by the macros
% "\MTr@bottomnodetrue" and "\MTr@bottomnodefalse".
%
% \begin{macro}{\MTr@bottomnodetrue}
% The node is a bottom node. Calculate the difference between this
% level and the bottom level as passed to "\synttree", and use this to
% determine how many levels the node has to be advanced vertically to
% get it at the correct position. In effect, the distance between two
% levels is multiplied by the ``branch multiplication.'' For
% non-bottom nodes this is set to 1.
%    \begin{macrocode}
\def\MTr@bottomnodetrue{%
  \MTr@branchmult\MTr@maxlevel%
  \advance\MTr@branchmult-\MTr@level%
  \advance\MTr@branchmult 1%
  \ifnum\MTr@branchmult<0%
    \typeout{synttree Warning: Tree has more levels than indicated.}%
    \typeout{>> Indicated: \the\MTr@maxlevel.}%
    \typeout{>> Level now: \the\MTr@level.}%
    \typeout{>> Mult now: \the\MTr@branchmult.}%
    \MTr@branchmult1%
  \fi%
  \MTr@mybranchmult\MTr@branchmult}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\MTr@bottomnodefalse}
% It's not a bottom node: Just set the branch multiplication to 1.
%    \begin{macrocode}
\def\MTr@bottomnodefalse{%
  \MTr@mybranchmult1}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Saving the children}
% Here are the macros for actually storing the children in the child
% boxes. For each child, store the tree itself, its $x$ position, its
% width, height and depth, its branch multiplication and whether or
% not it is a triangle. We use a generic save routine to save the children.
%    \begin{macrocode}
\def\MTr@save#1{%
  \sbox{\csname MTr@child#1box\endcsname}{\usebox{\MTr@childbox}}%
  \csname MTr@child#1x\endcsname\MTr@treex%
  \csname MTr@child#1w\endcsname\MTr@treew%
  \csname MTr@child#1height\endcsname\MTr@treeheight%
  \csname MTr@child#1depth\endcsname\MTr@treedepth%
  \csname MTr@child#1branchmult\endcsname\MTr@branchmult%
  \ifMTr@triangle%
    \csname MTr@child#1triangletrue\endcsname%
  \else%
    \csname MTr@child#1trianglefalse\endcsname%
  \fi}
%    \end{macrocode}
% Save any child.
%    \begin{macrocode}
\def\MTr@savechildboxold{%
    \ifnum\MTr@numchildren=1
      \MTr@save{i}%
    \else
      \ifnum\MTr@numchildren=2
        \MTr@save{ii}%
      \else
        \ifnum\MTr@numchildren=3
          \MTr@save{iii}%
        \else
          \typeout{synttree Error: Trying to save fourth child.}%
        \fi
      \fi
    \fi
}
%    \end{macrocode}
% \subsection{Creating the tree}
% \begin{macro}{\MTr@maketree}
% This macro is a horrible beast. It is the complete code for making
% the actual tree. It has completely separate implementations for each
% number of children from zero to two. It is my intention to modify
% this to allow any number of children to be displayed. The main macro does
% the following: It sets "\MTr@labelheight" to the height of the label,
% making sure it is at least the minimum height. Next, it sets
% corresponding variables for the depth and width of the label. Then, based
% on the number of children, macros are called for setting just the label,
% or one or two children.
%
% \emph{Actual code removed.}
% \end{macro}
%
% \begin{macro}{\MTr@outputlabel}
% Output just the label.
%    \begin{macrocode}
\def\MTr@outputlabel{%
%    \end{macrocode}
% First, set parameters: Height and depth of the subtree are equal to
% height and depth of the label. The $x$ and $w$ of the subtree each equal
% half the width of the label. Optionally, $x$ may be zero and $w$ may
% equal to the entire width of the label. The width and height of the
% picture to be drawn equal the width of the label and the height of the
% tree.
%    \begin{macrocode}
    \global\MTr@treeheight\MTr@labelheight%
    \global\MTr@treedepth\MTr@labeldepth%
    \ifMTr@mytriangle%
      \MTr@treew\MTr@labelhalfwidth%
      \MTr@treex\MTr@labelhalfwidth%
      \multiply\MTr@treew \MTr@trianglemultright%
      \multiply\MTr@treex \MTr@trianglemultleft%
      \divide\MTr@treew 50%
      \divide\MTr@treex 50%
      \global\MTr@treew\MTr@treew%
      \global\MTr@treex\MTr@treex%
    \else%
      \global\MTr@treew\MTr@labelhalfwidth%
      \global\MTr@treex\MTr@labelhalfwidth%
    \fi%
    \MTr@picwidth\wd\MTr@labelbox%
    \MTr@picheight\MTr@treeheight%
%    \end{macrocode}
% Second, draw the picture. The coordinates for the picture are nearly
% the same throughout. In any event, the label is centered in the
% picture, its baseline aligned with the bottom of the picture.
%    \begin{macrocode}
    \advance\MTr@picheight\MTr@treedepth%
    \begin{picture}%
        (\MTr@picwidth,\MTr@picheight)%
        (-\MTr@treex,-\MTr@picheight)%
      \put(-\MTr@treex,0){%
        \makebox(0,0)[tl]{%
          \rule{0pt}{\MTr@minheight}%
          \usebox{\MTr@labelbox}}}%
    \end{picture}%
}
%    \end{macrocode}
% \end{macro}
%
% Now, the macros for output with children. First, some utilitarian macros:
% Set $y$ and "picheight" for given child.
%    \begin{macrocode}
\def\MTr@setchilddimens#1{%
    \MTr@tempcnta-\MTr@branchheight%
    \multiply\MTr@tempcnta\csname MTr@child#1branchmult\endcsname%
    \MTr@tempcntb-\MTr@tempcnta%
    \advance\MTr@tempcntb\csname MTr@child#1depth\endcsname%
    \advance\MTr@tempcnta-\MTr@labelheight%
    \advance\MTr@tempcnta\csname MTr@child#1height\endcsname%
    \csname MTr@child#1y\endcsname\MTr@tempcnta%
    \csname MTr@pic#1height\endcsname\MTr@tempcntb%
}
%    \end{macrocode}
%
% Calculate desired distance between two children. For the pair of
% neighboring children, "tempcnta" is used temporarily to store what
% amounts to the distance between the central points of the two children.
% If it is below the value "childattachsep", adjust values so that is equal
% to it. "tempcnta" stores the resulting value.
%    \begin{macrocode}
\def\MTr@adjustdistance#1#2{
    \advance\csname MTr@child#1w\endcsname\MTr@childsidesep%
    \MTr@tempcnta\csname MTr@child#1w\endcsname%
    \advance\MTr@tempcnta\csname MTr@child#2x\endcsname%
    \ifnum\MTr@tempcnta<\MTr@childattachsep%
      \advance\csname MTr@child#1w\endcsname\MTr@childattachsep%
      \advance\csname MTr@child#1w\endcsname-\MTr@tempcnta%
      \MTr@tempcnta\MTr@childattachsep%
    \fi%
}
%    \end{macrocode}
% Set some parameters for the parent node. Parameters are the leftmost and
% rightmost child label.
%    \begin{macrocode}
\def\MTr@setparentdimens#1#2{%
%    \end{macrocode}
% Calculate the subtree's $x$ and $w$:
%    \begin{macrocode}
    \divide\MTr@treex 2%
    \MTr@treew\MTr@treex%
    \advance\MTr@treex\csname MTr@child#1x\endcsname%
    \advance\MTr@treew\csname MTr@child#2w\endcsname%
%    \end{macrocode}
% Calculate "morex": The distance the (first) subtree has to be shifted to
% the right to accomodate a large parent label size.
%    \begin{macrocode}
    \MTr@morex\MTr@labelhalfwidth%
    \advance\MTr@morex-\MTr@treex%
    \ifnum\MTr@morex<0\MTr@morex0\fi%
%    \end{macrocode}
% Large label sizes are also incorporated into $w$ and $x$.
%    \begin{macrocode}
    \ifnum\MTr@treew<\MTr@labelhalfwidth
        \MTr@treew\MTr@labelhalfwidth
    \fi%
    \ifnum\MTr@treex<\MTr@labelhalfwidth
        \MTr@treex\MTr@labelhalfwidth
    \fi%
%    \end{macrocode}
% Picture width.
%    \begin{macrocode}
    \MTr@picwidth\MTr@treex%
    \advance\MTr@picwidth\MTr@treew%
}
%    \end{macrocode}
% Set some parameters for the picture.
%    \begin{macrocode}
\def\MTr@setpictureparameters{%
    \global\MTr@treedepth\MTr@picheight%
    \advance\MTr@picheight\MTr@labelheight%
    \global\MTr@treeheight\MTr@labelheight%
    \MTr@parenty-\MTr@labelheight%
    \advance\MTr@parenty-\MTr@labeldepth%
    \advance\MTr@parenty-\MTr@lineoffset%
    \global\MTr@treex\MTr@treex%
    \global\MTr@treew\MTr@treew%
}
\def\MTr@drawlabel{%
  \put(\MTr@treex,0){%
    \makebox(0,0)[t]{%
      \rule{0pt}{\MTr@minheight}%
      \usebox{\MTr@labelbox}}}%
}
\def\MTr@drawchild#1{%
  \put(\MTr@morex,\csname MTr@child#1y\endcsname){%
    \makebox(0,0)[tl]{%
      \usebox{\csname MTr@child#1box\endcsname}}}%
}
\def\MTr@drawchildline#1{
  \csname ifMTr@child#1triangle\endcsname%
    \MTr@tempcnta\csname MTr@child#1x\endcsname%
    \MTr@tempcntb\csname MTr@child#1y\endcsname%
    \advance\MTr@tempcnta\csname MTr@child#1w\endcsname%
%    \advance\MTr@tempcnta\MTr@morex%
    \put(0,0){\MTr@drawline%
        (\MTr@treex,\MTr@parenty)%
        (\MTr@morex,\MTr@tempcntb)}%
    \put(0,0){\MTr@drawline%
        (\MTr@treex,\MTr@parenty)%
        (\MTr@tempcnta,\MTr@tempcntb)}%
    \put(0,0){\MTr@drawline%
        (\MTr@morex,\MTr@tempcntb)%
        (\MTr@tempcnta,\MTr@tempcntb)}%
  \else%
  \put(0,0){\MTr@drawline%
    (\MTr@treex,\MTr@parenty)%
    (\csname MTr@child#1x\endcsname,\csname MTr@child#1y\endcsname)}%
  \fi%
}
%    \end{macrocode}
% \begin{macro}{\MTr@outputonechild}
% Output label and one child.
%    \begin{macrocode}
\def\MTr@outputonechild{%
%    \end{macrocode}
% Calculate the subtree's $x$ and $w$:
%    \begin{macrocode}
    \MTr@treex0%
    \MTr@setparentdimens{i}{i}%
%    \end{macrocode}
% Set vertical position and picture height for child one
%    \begin{macrocode}
    \MTr@setchilddimens{i}%
%    \end{macrocode}
% Set height based on child one.
%    \begin{macrocode}
    \MTr@picheight\MTr@piciheight%
%    \end{macrocode}
% Set various other parameters.
%    \begin{macrocode}
    \MTr@setpictureparameters%
%    \end{macrocode}
% Start the picture.
%    \begin{macrocode}
    \begin{picture}%
          (\MTr@picwidth,\MTr@picheight)%
          (0,-\MTr@picheight)%
%    \end{macrocode}
% First, the label.
%    \begin{macrocode}
      \MTr@drawlabel%
%    \end{macrocode}
% Draw child one.
%    \begin{macrocode}
    \MTr@drawchild{i}%
%    \end{macrocode}
% Advance child's $y$ to make the line stop just above the label.
%    \begin{macrocode}
      \advance\MTr@childiy\MTr@lineoffset%
%    \end{macrocode}
% Draw a triangle or a line.
%    \begin{macrocode}
     \advance\MTr@childix\MTr@morex%
     \MTr@drawchildline{i}
%    \end{macrocode}
% End the picture.
%    \begin{macrocode}
    \end{picture}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\MTr@outputtwochildren}
% Two children.
%    \begin{macrocode}
\def\MTr@outputtwochildren{%
%    \end{macrocode}
% Calculate desired distance between the two children.
% "treex" is used to store the resulting value. Next, set paramaters for
% the parent label.
%    \begin{macrocode}
    \MTr@adjustdistance{i}{ii}%
    \MTr@treex\MTr@tempcnta%
    \MTr@setparentdimens{i}{ii}%
%    \end{macrocode}
% Set vertical position and picture height for child one and two
%    \begin{macrocode}
    \MTr@setchilddimens{i}%
    \MTr@setchilddimens{ii}%
%    \end{macrocode}
% Compare height based on child one with that based on child two.
%    \begin{macrocode}
    \ifnum\MTr@piciheight>\MTr@piciiheight%
      \MTr@picheight\MTr@piciheight%
    \else%
      \MTr@picheight\MTr@piciiheight%
    \fi%
%    \end{macrocode}
% Set various other parameters.
%    \begin{macrocode}
    \MTr@setpictureparameters%
%    \end{macrocode}
% Start the picture.
%    \begin{macrocode}
    \begin{picture}(\MTr@picwidth,\MTr@picheight)(0,-\MTr@picheight)%
%    \end{macrocode}
% First, the label.
%    \begin{macrocode}
    \MTr@drawlabel%
%    \end{macrocode}
% Draw child one.
%    \begin{macrocode}
    \MTr@drawchild{i}%
%    \end{macrocode}
% Adjust child one's $x$ to include "morex", and caculate "morex" for child
% two.
%    \begin{macrocode}
      \advance\MTr@childix\MTr@morex%
      \MTr@morex\MTr@childix%
      \advance\MTr@morex\MTr@childiw%
%    \end{macrocode}
% Draw child two.
%    \begin{macrocode}
    \MTr@drawchild{ii}%
%    \end{macrocode}
% Adjust child two's $x$ to include "morex".
%    \begin{macrocode}
      \advance\MTr@childiix\MTr@morex%
%    \end{macrocode}
% Remove a bit from the children's $y$'s, to make the lines stop just above
% the label, and draw them.
%    \begin{macrocode}
      \advance\MTr@childiy\MTr@lineoffset%
      \advance\MTr@childiiy\MTr@lineoffset%
      \MTr@drawchildline{i}
      \MTr@drawchildline{ii}
%    \end{macrocode}
% End the picture.
%    \begin{macrocode}
    \end{picture}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\MTr@outputthreechildren}
% Three children.
%    \begin{macrocode}
\def\MTr@outputthreechildren{%
%    \end{macrocode}
% Calculate desired distance between the three children.
% The cumulative value is put into "treex". Next, set dimensions for the
% label.
%    \begin{macrocode}
    \MTr@adjustdistance{i}{ii}%
    \MTr@treex\MTr@tempcnta%
    \MTr@adjustdistance{ii}{iii}%
    \advance\MTr@treex\MTr@tempcnta%
    \MTr@setparentdimens{i}{iii}%
%    \end{macrocode}
%
% Set vertical position and picture height for all children.
%    \begin{macrocode}
    \MTr@setchilddimens{i}%
    \MTr@setchilddimens{ii}%
    \MTr@setchilddimens{iii}%
%    \end{macrocode}
% Height is the height of the largest child.
%    \begin{macrocode}
    \MTr@picheight\MTr@piciheight%
    \ifnum\MTr@piciiheight>\MTr@picheight%
      \MTr@picheight\MTr@piciiheight%
    \fi%
    \ifnum\MTr@piciiiheight>\MTr@picheight%
      \MTr@picheight\MTr@piciiiheight%
    \fi%
%    \end{macrocode}
% Set various other parameters.
%    \begin{macrocode}
    \MTr@setpictureparameters%
%    \end{macrocode}
% Start the picture.
%    \begin{macrocode}
    \begin{picture}(\MTr@picwidth,\MTr@picheight)(0,-\MTr@picheight)%
%    \end{macrocode}
% First, the label.
%    \begin{macrocode}
    \MTr@drawlabel%
%    \end{macrocode}
% Draw child one, adjust its $x$ to include "morex", and calculate "morex"
% for child two.
%    \begin{macrocode}
    \MTr@drawchild{i}%
      \advance\MTr@childix\MTr@morex%
      \MTr@morex\MTr@childix%
      \advance\MTr@morex\MTr@childiw%
%    \end{macrocode}
% Draw child two, adjust its $x$ to include "morex", and calculate "morex"
% for child three.
%    \begin{macrocode}
    \MTr@drawchild{ii}%
      \advance\MTr@childiix\MTr@morex%
      \MTr@morex\MTr@childiix%
      \advance\MTr@morex\MTr@childiiw%
%    \end{macrocode}
% Draw child three, and adjust its $x$ to include "morex".
%    \begin{macrocode}
    \MTr@drawchild{iii}%
      \advance\MTr@childiiix\MTr@morex%
%    \end{macrocode}
% Remove a bit from the children's $y$'s, to make the lines stop just above
% the label, and draw them.
%    \begin{macrocode}
      \advance\MTr@childiy\MTr@lineoffset%
      \advance\MTr@childiiy\MTr@lineoffset%
      \advance\MTr@childiiiy\MTr@lineoffset%
      \MTr@drawchildline{i}
      \MTr@drawchildline{ii}
      \MTr@drawchildline{iii}
%    \end{macrocode}
% End the picture.
%    \begin{macrocode}
    \end{picture}%
}
%    \end{macrocode}
% \end{macro}
%
% \Finale
% \PrintIndex \PrintChanges
\endinput
